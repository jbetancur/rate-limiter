// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadRate_limiter returns the embedded CollectionSpec for rate_limiter.
func loadRate_limiter() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Rate_limiterBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load rate_limiter: %w", err)
	}

	return spec, err
}

// loadRate_limiterObjects loads rate_limiter and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*rate_limiterObjects
//	*rate_limiterPrograms
//	*rate_limiterMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadRate_limiterObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadRate_limiter()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// rate_limiterSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type rate_limiterSpecs struct {
	rate_limiterProgramSpecs
	rate_limiterMapSpecs
}

// rate_limiterSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type rate_limiterProgramSpecs struct {
	RateLimit *ebpf.ProgramSpec `ebpf:"rate_limit"`
}

// rate_limiterMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type rate_limiterMapSpecs struct {
	Connections *ebpf.MapSpec `ebpf:"connections"`
}

// rate_limiterObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadRate_limiterObjects or ebpf.CollectionSpec.LoadAndAssign.
type rate_limiterObjects struct {
	rate_limiterPrograms
	rate_limiterMaps
}

func (o *rate_limiterObjects) Close() error {
	return _Rate_limiterClose(
		&o.rate_limiterPrograms,
		&o.rate_limiterMaps,
	)
}

// rate_limiterMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadRate_limiterObjects or ebpf.CollectionSpec.LoadAndAssign.
type rate_limiterMaps struct {
	Connections *ebpf.Map `ebpf:"connections"`
}

func (m *rate_limiterMaps) Close() error {
	return _Rate_limiterClose(
		m.Connections,
	)
}

// rate_limiterPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadRate_limiterObjects or ebpf.CollectionSpec.LoadAndAssign.
type rate_limiterPrograms struct {
	RateLimit *ebpf.Program `ebpf:"rate_limit"`
}

func (p *rate_limiterPrograms) Close() error {
	return _Rate_limiterClose(
		p.RateLimit,
	)
}

func _Rate_limiterClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed rate_limiter_bpfel.o
var _Rate_limiterBytes []byte
